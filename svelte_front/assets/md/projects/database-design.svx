---
title: Database Design
coverImage: /blog/assets/images/projects/db-diagram.webp
date: 2023-12-02T16:10:00.000Z
updated: 2023-12-05T19:18:34.000Z
excerpt: The SQL table schemas for the backend and planned features.
hidden: false
tags:
  - Database
---

# Database
In this devlog I will document the various features which store data, how I design the tables and query patterns, and what technologies I try for each.

## Data features
* comments
* blog post metadata
* music lookup
* map locations
* analytics

# Todo
- [x] Comments data design
- [x] Comments API 
- [x] Blog data design
- [ ] Blog API 
- [x] Music data design
- [ ] Music API 
- [x] Map data design
- [ ] Map API 
- [x] Analytics data design
- [ ] Analytics API 
&nbsp;&nbsp;<br>

[//]: # ( ========== Auth ========== )
# Authentication

### Requirements
* users can post comments
* users can sign up for email notifications on posts + comments
* users can access map features: post locations, services, comments

### Query Patterns / Usage
user id -> authorizations

### Entities
```erd
[Users]
*'id: int'
'username: string'
'password_hash: varchar'
'ip_fingerprint: varchar'
'email: varchar'
'post_notif: bool'
'comment_notif: bool'

[Groups]
*'id: int'
'name: varchar'

[Permissions]
*'id: int'
'name: varchar'

Users *--+ Groups
Groups *--+ Permissions
```

[//]: # ( ========== Comments ========== )
# Comments

### Requirements
* comment on a blog
* vote on comments?
* reply to comments
* sort comments by votes or timestamp
* search user's comments

### Query Patterns / Usage
load blog page: blog id -> comments
load user page: user -> comments + replies

### Entites

```erd
[Comments]
'id: int'
'user_id: users(id)'
'timestamp: datetime'
'text: text'
'upvotes: int'
'reply_to: comments(id)'

Users 1--* Comments
Blogs 1--* Comments
```
### API
The 2 places we need to be able to get comments for are on articles and on a user page. I guess it would be nice to be able to have comments on any page if I ever want to refactor the same comments system into a forum. Maybe I'll call the blog_id


[//]: # ( ========== Blog ========== )
# Blog

### Requirements
* To enable infinite scroller
* initial load should download only featured blogs 
* scrolling loads next n blogs
* when a filter is applied only relevant blogs are queried

### Query Patterns / Usage

### Entites
```erd:Blogs
[Blogs]
*'id: int'
'title: varchar'
'excerpt: text'
'date: datetime'
'updated: datetime'
'hidden: boolean'
'views: int'
'uri: varchar'

[Tags]
*'id: int'
'name: varchar'

Blogs +--+ Tags
Users 1--* Blogs
```

[//]: # ( ========== Music ========== )
# Music

### Requirements
* similar songs have similar embeddings
* similar playlists have similar embeddings
* liking a song modifies user's preference embedding
* playlists can be automatically generated from a user's embedding
* find n songs which produce a playlist with a nearby embedding
* each user can have n music preference 'modes' which adjust to a task

### Query Patterns / Usage
song id -> song
playlist id -> playlist
embedding -> similar song or playlist
embedding -> new playlist

### Entites
```erd
[Songs]
*'id: int'
'spotify_id: varchar'
'acousticness: float'
'danceability: float'
'duration_ms: int'
'energy: float'
'instrumentalness: float'
'key: int'
'liveness: float'
'loudness: float'
'mode: int'
'speechiness: float'
'tempo: float'
'time_signature: int'
'valence: float'

[Playlists]
*'id: int'
'embedding: varchar'

[MusicPrefs]
*'id: int'
'embedding: varchar'

Song +--* Playlist
User 1--* MusicPref
```

[//]: # ( ========== Map ========== )
# Map

### Requirements
Stick closely to the OpenMaps spec
Locations
* mark a point on a map
Services
* describe a service offered at a location
users can
* post a location
* post a service
* comment on location or service
* purchase service

### Query Patterns / Usage
Location -> Nearby locations
Location -> Services
Location -> Comments
Service -> Comments

### Entites
```erd
[Locations]
*'id: int'
'latitude: float'
'longitude: float'
'title: varchar'
'description: text'
'user_id: user(id)'

[Services]
*'id: int'
'location_id: location(id)'
'title: varchar'
'description: text'
'price: int'

Location *--1 User
Service *--1 User
Service *--+ Location
Location 1--* Comment
Service 1--* Comment
```

[//]: # ( ========== Analytics ========== )
# Analytics

### Requirements
To enable usage insights, prediction-prefetching, ad data, and dashboards

### Query Patterns / Usage
location -> nearby points of interest``

### Entites
```erd
[Logs]
*'id: int'
'name: varchar'

[Analytics]
*'id: int'
'timestamp: datetime'
'source: varchar'
'key: varchar'
'value: text'

Logs +--* Analytics
```


<!--
### Requirements
### Query Patterns / Usage
### Entites
-->


# Learnings

