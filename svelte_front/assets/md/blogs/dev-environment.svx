---
slug: dev-environment
title: My Development Environment Setup and Coding Workflow
coverImage: /blog/assets/images/blogs/dev-env.webp
date: 2023-10-29T16:02:03.000Z
updated: 2023-10-30T15:39:05.000Z
excerpt: How I set up my machine to work on software
hidden: false
tags:
  - SDLC
  - Personal
---

<script>
  import CodeBlock from "@lib/components/molecules/CodeBlock.svelte";
</script>

## Introduction
> Give me six hours to chop down a tree and I will spend the first four sharpening the axe. <br> Abraham Lincoln

Well cared for tools are an important part of building anything. That's why it's vital to have a development environment that you are intimately familiar with and are comfortable working in. A dull axe makes for slow and sloppy cuts, but a little bit of tlc even the biggest, knottiest trees are light work.

A computer with your favorite programs, with files in the right places, and with everything configured makes designing and building software so much more enjoyable. If you've ever ssh'd into a bare-bones machine and had to think twice about how to do everything without your normal configs, you know what I'm talking about. If you haven't, it's kind of like driving in someone else's car, cooking in a new kitchen, or showering in a new bathroom. What are all these buttons and how do I just make the dang water the right temperature?!

## Development Environment Setup
Firstly, we should cover the basics. Although you can program on any operating system with pretty similar configuration, it's an important choice. I started out programming on Windows, but moved to Linux because desktop VMs used to be pretty un-ergonomic. My work devices have all been MacOS, which I enjoyed as I could use pretty much the  same tools and config I learned in school just with a clean and polished interface. On my personal desktop I run Windows for gaming and media, but WSL has come a long way. It's not quite as seamless of a unix experience as MacOS or Linux, but it's been good enough for my needs so far.

The basics that you'll need on any OS are
- A terminal
- A text editor / IDE
- Command line tools


## Terminal
The terminal I use depends somewhat on the OS I'm using. I always use [nerd fonts patched Mononoki monospaced with a solarized dark theme, but sometimes in a bright office or outsite I'll switch to a brighter theme.
### Windows
On Windows, I still prefer to code in a unix environment, so I use [Windows Terminal](https://apps.microsoft.com/detail/9N0DX20HK701), which can connect to wsl natively

### Linux
On Linux, the preinstalled terminals are pretty good on most distributions. [Terminator](https://gnome-terminator.org/) also has some nice features, I mainly liked it for the pane splitting features as I found ctrl+ keybinds easier than using Tmux, although I would like to learn it for use in remote sessions.

### MacOS
On MacOS, I used [iTerm2](https://iterm2.com/) as my terminal for a while, and it has some nice features. I've been trying to get in the habit of using more standard software and configuring it to work the way I like. This has had the double benefit of forcing me to learn more about my tools, and freeing up some storage space.

### Cloud Desktops
Writing code locally is comfortable, but I do like cloud desktops for builds and testing. Spending less time waiting for builds is nice, but I think the latency, network interruptions, and complexity of having to log in, is really only worth it if the cloud machine is significantly more powerful than your laptop, or if you're working on codebases that require a lot of storage to build or test.

Amazon has a really nice system for syncing your files to a VM in the cloud to speed up your builds. I've heard other tech companies have similar systems.

I tried codespaces and didn't particularly like it, but I didn't put very much time into learning the ins and outs, so I'm planning on giving it another try. I doubt the free tier is much of a benefit over my machine but I'll have to see.

The simplest solution, which I've used in college and at Redjack, is to just use git. Your code should already by in a repo, so just push it there and pull it into wherever you want to build. That does mean that your cloud desktop needs to have internet access, but you could use scp, rsync, etc with some scripting (That's basically what any sync tool besides git is anyways).

### Terminal Config

<CodeBlock lang="bash" filename="zshrc">

</CodeBlock>

## Editor / IDE
### Windows
[VSCode](https://code.visualstudio.com/) works great on Windows with the [WSL extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl). I use Vim for quickly editing things, and I use notepad as a scratch pad as it's lighter than another VSCode window and I don't like adding extra tabs for that.

### Linux
I've used a lot of Editors on Linux. I started out using Vim, and still do over ssh. I used [Atom](https://github.com/atom/atom) though college, and started using VSCode since more language servers have become available. I think VSCode has a better debugging story than Atom, and is somewhat faster in my experience. I've also tried sublime and a few others, but VSCode is my favorite at the moment.

### MacOS
I think the best IDE I've used yet is [JetBrains](https://www.jetbrains.com/). VSCode is a lot faster to load and move around in, and the config is easier to manage, but IntelliJ has a lot of really nice features when you have an enterprise license. I always keep VSCode installed alongside IntelliJ though.

## Shell
No matter what OS I'm using, I configure my shell the same. I don't really use IDE terminals, so I like to make mine pretty. I use zsh with [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh) & [powerlevel10k](https://github.com/romkatv/powerlevel10k). I like the built in shortcuts of zsh and the way powerlevel10k makes customizing my prompt super easy. It has all kinds of pre-made things like git repo status, language environments & versions. I also really like transient prompt, which removes the prompt from past commands. There are some other nice features, but I'll dive deep about that in another post.

## Tools
You can find a script that installs everything I use in my [dotfiles repo](https://github.com/jackbellinger/dotfiles)
The main things I use regularly are git, net-tools, rsync, ffmpeg, python + numpy & matplotlib. I'll go over language specific tools another time, but those are the ones I use for general productivity and file management.
I also generally install as needed: docker, cloud admin cli tools, wire/tshark, GDB/Valgrind, and Gimp. I'd also like to learn more about BitWarden and a Fuzzy finder.
I also always install slack, discord, and a browser, but those are not directly dev tools. I usually install a multitude of browsers for testing web apps, for when a service doesn't support one or the other, etc.

In my next post, I'll go over how I use these tools in my workflows! I'm working on an rss feed page and email list, but for now you'll have to remember to check back soon for updates :)

Cheers,
Jack