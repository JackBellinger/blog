---
title: Blog Stack
coverImage: /blog/assets/images/blogs/blog-stack.webp
date: 2023-09-26T02:32:00.000Z
updated: 2023-11-22T21:45:39.000Z
excerpt: The tech stack I chose for this blog
hidden: false
tags:
  - Blog
---



## TL;DR
I made this personal blog / portfolio to post articles about anything and devlogs about stuff I'm working on.

It's built using Svelte, Vite, and Axum.
The backend is in the server directory and the blog frontend is in the svelte_front directory.
There's a placeholder yew todo app is in the yew_front directory that I added to test out serving multiple frontends from the same webserver.
The frontend is currently hosted on Github pages for simplicity until I implement backend features.


## What is this?
For a long time, I've just used Github as my portfolio. In school, I created repos for all of my classes and projects, so that I could easily work on them on my machine and in the labs. Also, it was great for group projects, and prepared me well for learning git in more depth at work. That was good enough for a while, but now that I'm applying to mid level software jobs, I need a place to show my work running.

## How did I make it?
As always, I started with a bit of research first. I knew I wanted to use a Rust backend, so I looked into Actix, Axum, Rocket, and some others. Initially, I thought of building the frontend in Rust as well, since WebAssmenbly support has been improving and I've heard some good things about the Rust frameworks. I tried Yew and Leptos, and I actually have a Yew todo example in this repo that I'm going to try out on some more compute intensive projects (Like the [Lofi music project](/blog/projects/lofi-gen) I'm currently researching). To make the frontend a bit simpler, and to brush up on my JS skills, I decided to try out a JS framework, and settled on Svelte.

### Why Axum?
Initially, I read some good things about Actix. It was / still is? the fastest webserver or something, but it had some drama with the original maintainer. The main reason I decided on Axum was that it's maintained by the Tokio community. I've used Tokio's async executor on other projects and it was pretty ergonomic, so I'm hoping Axum will be as well. Apparently it's meant to be a pretty light layer that leaves most of the heavy lifting to various Tower services. The simple stuff I've implemented so far has been pretty easy, although I encountered a few verbose Tower types. I like that modularity. That's a big reason I chose to use Svelte, as it's easy to use it bundled with Vite without the SvelteKit backend.

### Why Svelte?
I have worked with various JS frameworks before, but I tried Svelte and I like it a lot. It doesn't have much framework specific stuff to learn, and it feels kind of writing vanilla javascript with some nice convenience abstractions. I really like how it compiles to regular DOM interacting JS. Also, what really sold me on it was that all of the few rough edges I found while implementing eg reactivity and stores were addressed in the Svelte v5 announcement. I'm excited to see how that turns out!

### Why not SvelteKit?
I chose not to use SvelteKit so that I could implement the backend myself in Rust. There's a lot of cool development on SvelteKit, but I enjoy systems programming so I don't want it abstracted away.